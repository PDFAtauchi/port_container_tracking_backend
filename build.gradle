plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.diffplug.spotless" version "6.23.3"
	id 'jacoco'
}

group = 'com.practice'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation group: 'org.instancio', name: 'instancio-junit', version: '3.6.0'
}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

jacoco {
	toolVersion = "0.8.11"
}

def jacocoExcludeFiles = ['**/PortContainerTrackingBackendApplication.class']

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestCoverageVerification, jacocoTestReport
	testLogging {
		events = ["PASSED", "FAILED", "SKIPPED"]
		showStandardStreams = true
		exceptionFormat = "full"
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludeFiles)
		}))
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludeFiles)
		}))
	}

	def coverageRatio = 0.80
	violationRules {
		rule {
			limit {
				counter = 'BRANCH'
				minimum = coverageRatio
			}
		}

		rule {
			limit {
				counter = 'METHOD'
				minimum = coverageRatio
			}
		}

		rule {
			limit {
				counter = 'CLASS'
				minimum = coverageRatio
			}
		}
	}
}

spotless {
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		importOrder()
		toggleOffOn()
		palantirJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
		formatAnnotations()
	}
}
